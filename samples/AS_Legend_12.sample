{:tags []
     :is_new false
     :exports "chart"}

anychart.onDocumentReady(function() {
  
  // set stage
  var stage = anychart.graphics.create('container');
  
  // data
  var data = anychart.data.set([
    ['John',  10000, 12000, 20000, 16000],
    ['Jake',  12000, 15000, 19000, 21000],
    ['Peter', 16000, 17000, 21000, 22000]
  ]);
  
  // get default color palette
  var palette = anychart.palettes.distinctColors().colors();
  
  var legends = [];
  // array of legends' alignments
  var legendPositions = ['left','center','right'];
  
  for (var managers = 0; managers<data.mapAs().getRowsCount();managers++){
    legends.push(anychart.ui.legend());                     // create a legend for every manager
    var items=[];                                           // create items array for every manager
    for (var itemsCount=1;itemsCount<data.data()[managers].length;itemsCount++){
      items.push({
        text: data.data()[managers][itemsCount].toString(), // text of item
        iconType: 'square',                                 // type of icons
        iconFill: palette[itemsCount-1],                    // color of icons
        iconStroke: anychart.color.darken(palette[itemsCount-1], 0.2)
      });
    }
    
    legends[managers]
      .position('bottom')                                   // legends positions
      .align(legendPositions[managers])                     // get alignment from array
      .itemsLayout('vertical')                              // define items layout
      .items(items)                                         // get items from array
      .title({                                              // legend title settings
        text:data.data()[managers][0].toString(),           // get legend title text from data
        hAlign: 'center'                                    // place title text at the center
      });
    
    // set legend listeners
    listener(legends[managers], managers, items);
    function listener(legend, manager, items) {
      // event on mouse over item
      legend.listen('legendItemMouseOver', function (event){
        // get item index
        var index = event['itemIndex'];
        // make column color a bit lighter
        chart.getSeries(index).data().set(manager, 'fill', anychart.color.lighten(palette[index], 0.2));
      });
      // event on mouse out from the item
      legend.listen('legendItemMouseOut', function (event){
        // get item index
        var index = event['itemIndex'];
        // restore default column color
        chart.getSeries(index).data().set(manager, 'fill', palette[index]);
      });
      // event on item click
      legend.listen('legendItemClick', function(event){
        // get item index
        var index = event['itemIndex'];
        // if column is already hidden
        if (chart.getSeries(index).data().get(manager, 'value') == 'missing'){
          // restore column value
          chart.getSeries(index).data().set(manager, 'value', items[index].text);
          // restore item color
          items[index].fontColor = '#000';
          items[index].iconFill = palette[index];
          items[index].iconStroke = anychart.color.darken(palette[index], 0.2);
          legend.itemsFormatter(function(){return items});
        }
        else{
          // hide column
          chart.getSeries(index).data().set(manager, 'value', 'missing');
          // make item gray
          items[index].fontColor = '#999';
          items[index].iconFill = '#999';
          items[index].iconStroke = '#999';
          legend.itemsFormatter(function(){return items});
        }
        legend.draw();
      });
    }
    
    // draw every legend
    legends[managers].container(stage).draw();
  }
  
  // chart type
  var chart = anychart.column();
  
  // manage data and create series
  for(var seriesCount=1;seriesCount<data.data()[0].length;seriesCount++){
    var seriesData = [];
    for (pointsCount = 0;pointsCount<data.mapAs().getRowsCount();pointsCount++){
      seriesData.push({
        x: data.data()[pointsCount][0],
        value: data.data()[pointsCount][seriesCount],
        fill: palette[seriesCount-1]
      });
    }
    chart.column(seriesData).name('Quarter '+seriesCount);
  }
  
  chart
    .xAxis({title:{enabled: false}})  // disable x axis title
    .yAxis({title:{enabled: false}})  // disable y axis title
    .title({text:'Custom Legend'})    // set chart title
    .background(null)                 // disable chart background
    .legend({                         // settings for default chart legend
      titleSeparator: true,           // enable title separator
      enabled: true,                  // enable legend
      position: 'right',              // set legend position
      align:'top',                    // set legend alignment
      itemsLayout: 'vertical',        // set items positions
      title:{                         // settings for legend title
        useHtml: true,                // force HTML usage
        enabled: true,                // enable title
        hAlign: 'center',             // place title at the center
        fontSize: 14,                 // set title font size
        text:'Total sales<br><i style="color: #999; font-weight: 400; font-size: 11px;">(Year 2004)</i>'
      }
    })
    .margin({                         // prevent legends overlapping
      bottom: stage.height() - legends[0].getRemainingBounds().getHeight() - 10
    })
    .container(stage)                 // set chart container
    .draw();                          // draw chart
  
  // redraw legends if the chart is redrawn
  chart.listen('chartDraw',function (){
    for (var i=0;i<legends.length;i++){
      legends[i].parentBounds(anychart.math.rect(0,0,chart.container().width(),chart.container().height())).draw();
    }
  });
});